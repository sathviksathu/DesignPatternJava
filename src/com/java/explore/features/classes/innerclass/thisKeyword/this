# this keyword

* Within an instance method or a constructor, this is a reference to the current object

* You can refer to any member of the current object from within an instance method or a constructor by using this.

### Using `this` with a Field
For example, Consider Point class written like this:

~~~
public class Point {
    public int x = 0;
    public int y = 0;
        
    //constructor
    public Point(int a, int b) {
        x = a;
        y = b;
    }
}
~~~

but it could have been written like this:

~~~
public class Point {
    public int x = 0;
    public int y = 0;
        
    //constructor
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
~~~

**Each argument to the constructor shadows one of the object's fields â€” inside the constructor x is a local copy of the constructor's first argument. To refer to the Point field x, the constructor must use this.x.**

### Using `this` with a Constructor

From within a constructor, you can also use the this keyword to call another constructor in the same class. 

Doing so is called an explicit constructor invocation. 

For example, Consider Rectangle class written like this:

~~~
public class Rectangle {
    private int x, y;
    private int width, height;
        
    public Rectangle() {
        this(0, 0, 1, 1);
    }
    public Rectangle(int width, int height) {
        this(0, 0, width, height);
    }
    public Rectangle(int x, int y, int width, int height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    ...
}
~~~

**if present, the invocation of another constructor must be the first line in the constructor.**


#### References

**[Oracle Java Tutorials - Using the this Keyword](https://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html)**
