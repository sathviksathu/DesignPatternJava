Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.

========Problem=====
Let's say you are working with a 3rd Party service, whose code cannot be changed. You as a client
expect and know the 3rd party service to render in a specific format, for which you have an Interface
defined. However, The implementation on 3rd Party service doesn't return in the expected format.

=======Premise======
This is when you realize, that there is some incompatibility between client and Service, which
should ring bells about Adapter pattern in you head.

=======According to Definition======
Adapter is a structural design pattern that allows objects
with incompatible interfaces to collaborate.

======Solution=====
You can create an adapter. This is a special object that converts the interface
of one Object(Service) so that another Object(Client) can understand it.

An adapter wraps one of the objects(service) to hide the complexity of conversion happening behind the scenes.
The wrapped object isn’t even aware of the adapter.

For Instance,In our AreaExample, we wrapped AreaService that operates in meters and kilometers with an
Areaadapter that converts all of the data to imperial units of feet.

====Little More Analysis=====
Adapters can not only convert data into various formats but can also help objects with
different interfaces collaborate. Here’s how it works:

1) The adapter gets an interface, (compatible with/Known to) the Client(AreaInterface).
2) Using this interface, the client can safely(interface is an assurance) call the adapter’s methods(client can suerly know of getArea()).
3) Upon receiving a call, the adapter passes the request to the service, but in a format and order that the second object expects.

====Walkthrough of Components=====
1) The Client(CostCalculator) is a class that contains the existing business logic of the program.
2) The Client Interface(AreaInterface) describes a protocol that other classes must
   follow to be able to collaborate with the client code.
3) The Service(AreaService) is some useful class (usually 3rd-party or legacy).
   The client can’t use this class directly because it has an incompatible interface.
4) The Adapter(AreaAdapter) is a class that’s able to work with both the client and the service: it implements the client interface,
   while wrapping the service object. The adapter receives calls from the client via the adapter interface
   and translates them into calls to the wrapped service object in a format it can understand.
5) The client code doesn’t get coupled to the concrete adapter class as long as it works with the adapter via the client interface. T
   Thanks to this, you can introduce new types of adapters into the program without breaking the existing client code.
   This can be useful when the interface of the service class gets changed or replaced:
   you can just create a new adapter class without changing the client code.


======FOR MORE INFORMATION=======
There is this beautiful page from Refactoring.guru, where you can find even aesthetic
representation of above content. However, Here there has been an attempt to relate it with
the example I implemented.

======Link=======
https://refactoring.guru/design-patterns/adapter

